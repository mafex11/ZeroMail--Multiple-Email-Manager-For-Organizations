{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///H:/Fusion%20Mail%20-%20Chrome%20Extension/zeromail/fusion-mail-website/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose'\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local')\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\ninterface MongooseCache {\r\n  conn: typeof mongoose | null\r\n  promise: Promise<typeof mongoose> | null\r\n}\r\n\r\n// eslint-disable-next-line no-var\r\ndeclare var global: {\r\n  mongoose: MongooseCache\r\n}\r\n\r\nlet cached = global.mongoose\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null }\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    }\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose\r\n    })\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise\r\n  } catch (e) {\r\n    cached.promise = null\r\n    throw e\r\n  }\r\n\r\n  return cached.conn\r\n}\r\n\r\nexport default connectDB "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAiBA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///H:/Fusion%20Mail%20-%20Chrome%20Extension/zeromail/fusion-mail-website/src/lib/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose'\r\n\r\nexport interface IUser extends Document {\r\n  email: string\r\n  name: string\r\n  image?: string\r\n  provider: string\r\n  providerId: string\r\n  accounts: IGmailAccount[]\r\n  subscription: ISubscription\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface IGmailAccount {\r\n  email: string\r\n  accessToken: string\r\n  refreshToken: string\r\n  profilePicture?: string\r\n  isActive: boolean\r\n  addedAt: Date\r\n}\r\n\r\nexport interface ISubscription {\r\n  plan: 'free' | 'weekly' | 'monthly' | 'lifetime'\r\n  status: 'active' | 'inactive' | 'cancelled' | 'expired'\r\n  startDate?: Date\r\n  endDate?: Date\r\n  razorpaySubscriptionId?: string\r\n  razorpayPaymentId?: string\r\n  razorpayOrderId?: string\r\n  amount?: number\r\n  currency?: string\r\n  features: {\r\n    aiQueries: number // -1 for unlimited\r\n    emailSummaries: number // -1 for unlimited\r\n    advancedSearch: boolean\r\n    otpAutoFill: boolean\r\n    prioritySupport: boolean\r\n    earlyAccess: boolean\r\n  }\r\n}\r\n\r\nconst GmailAccountSchema = new Schema<IGmailAccount>({\r\n  email: { type: String, required: true },\r\n  accessToken: { type: String, required: true },\r\n  refreshToken: { type: String, required: true },\r\n  profilePicture: { type: String },\r\n  isActive: { type: Boolean, default: true },\r\n  addedAt: { type: Date, default: Date.now }\r\n})\r\n\r\nconst SubscriptionSchema = new Schema<ISubscription>({\r\n  plan: { \r\n    type: String, \r\n    enum: ['free', 'weekly', 'monthly', 'lifetime'], \r\n    default: 'free' \r\n  },\r\n  status: { \r\n    type: String, \r\n    enum: ['active', 'inactive', 'cancelled', 'expired'], \r\n    default: 'active' \r\n  },\r\n  startDate: { type: Date },\r\n  endDate: { type: Date },\r\n  razorpaySubscriptionId: { type: String },\r\n  razorpayPaymentId: { type: String },\r\n  razorpayOrderId: { type: String },\r\n  amount: { type: Number },\r\n  currency: { type: String, default: 'INR' },\r\n  features: {\r\n    aiQueries: { type: Number, default: 3 }, // Free tier: 3 per day\r\n    emailSummaries: { type: Number, default: 3 }, // Free tier: top 3 emails only\r\n    advancedSearch: { type: Boolean, default: false },\r\n    otpAutoFill: { type: Boolean, default: true }, // Available for all plans\r\n    prioritySupport: { type: Boolean, default: false },\r\n    earlyAccess: { type: Boolean, default: false }\r\n  }\r\n})\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  email: { type: String, required: true, unique: true },\r\n  name: { type: String, required: true },\r\n  image: { type: String },\r\n  provider: { type: String, required: true },\r\n  providerId: { type: String, required: true },\r\n  accounts: [GmailAccountSchema],\r\n  subscription: { type: SubscriptionSchema, default: () => ({}) }\r\n}, {\r\n  timestamps: true\r\n})\r\n\r\n// Create indexes for better performance\r\nUserSchema.index({ email: 1 })\r\nUserSchema.index({ 'accounts.email': 1 })\r\nUserSchema.index({ 'subscription.razorpaySubscriptionId': 1 })\r\n\r\nexport default mongoose.models.User || mongoose.model<IUser>('User', UserSchema) "],"names":[],"mappings":";;;AAAA;;AA2CA,MAAM,qBAAqB,IAAI,yGAAA,CAAA,SAAM,CAAgB;IACnD,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,cAAc;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC7C,gBAAgB;QAAE,MAAM;IAAO;IAC/B,UAAU;QAAE,MAAM;QAAS,SAAS;IAAK;IACzC,SAAS;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC3C;AAEA,MAAM,qBAAqB,IAAI,yGAAA,CAAA,SAAM,CAAgB;IACnD,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAQ;YAAU;YAAW;SAAW;QAC/C,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAU;YAAY;YAAa;SAAU;QACpD,SAAS;IACX;IACA,WAAW;QAAE,MAAM;IAAK;IACxB,SAAS;QAAE,MAAM;IAAK;IACtB,wBAAwB;QAAE,MAAM;IAAO;IACvC,mBAAmB;QAAE,MAAM;IAAO;IAClC,iBAAiB;QAAE,MAAM;IAAO;IAChC,QAAQ;QAAE,MAAM;IAAO;IACvB,UAAU;QAAE,MAAM;QAAQ,SAAS;IAAM;IACzC,UAAU;QACR,WAAW;YAAE,MAAM;YAAQ,SAAS;QAAE;QACtC,gBAAgB;YAAE,MAAM;YAAQ,SAAS;QAAE;QAC3C,gBAAgB;YAAE,MAAM;YAAS,SAAS;QAAM;QAChD,aAAa;YAAE,MAAM;YAAS,SAAS;QAAK;QAC5C,iBAAiB;YAAE,MAAM;YAAS,SAAS;QAAM;QACjD,aAAa;YAAE,MAAM;YAAS,SAAS;QAAM;IAC/C;AACF;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAQ;IACnC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;IAAO;IACtB,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,YAAY;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC3C,UAAU;QAAC;KAAmB;IAC9B,cAAc;QAAE,MAAM;QAAoB,SAAS,IAAM,CAAC,CAAC,CAAC;IAAE;AAChE,GAAG;IACD,YAAY;AACd;AAEA,wCAAwC;AACxC,WAAW,KAAK,CAAC;IAAE,OAAO;AAAE;AAC5B,WAAW,KAAK,CAAC;IAAE,kBAAkB;AAAE;AACvC,WAAW,KAAK,CAAC;IAAE,uCAAuC;AAAE;uCAE7C,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///H:/Fusion%20Mail%20-%20Chrome%20Extension/zeromail/fusion-mail-website/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport { MongoDBAdapter } from '@next-auth/mongodb-adapter'\r\nimport { MongoClient } from 'mongodb'\r\nimport connectDB from './mongodb'\r\nimport User, { IGmailAccount } from './models/User'\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI!)\r\nconst clientPromise = client.connect()\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: MongoDBAdapter(clientPromise),\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      authorization: {\r\n        params: {\r\n          scope: 'openid email profile https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.modify',\r\n          access_type: 'offline',\r\n          prompt: 'consent',\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn({ user, account }) {\r\n      if (account?.provider === 'google') {\r\n        try {\r\n          await connectDB()\r\n          \r\n          // Check if user exists\r\n          let existingUser = await User.findOne({ email: user.email })\r\n          \r\n          if (!existingUser) {\r\n            // Create new user with default free subscription\r\n            existingUser = new User({\r\n              email: user.email,\r\n              name: user.name,\r\n              image: user.image,\r\n              provider: account.provider,\r\n              providerId: account.providerAccountId,\r\n              accounts: [{\r\n                email: user.email!,\r\n                accessToken: account.access_token!,\r\n                refreshToken: account.refresh_token!,\r\n                profilePicture: user.image,\r\n                isActive: true,\r\n                addedAt: new Date()\r\n              }],\r\n              subscription: {\r\n                plan: 'free',\r\n                status: 'active',\r\n                startDate: new Date(),\r\n                features: {\r\n                  aiQueries: 3,\r\n                  emailSummaries: 3,\r\n                  advancedSearch: false,\r\n                  otpAutoFill: true,\r\n                  prioritySupport: false,\r\n                  earlyAccess: false\r\n                }\r\n              }\r\n            })\r\n            await existingUser.save()\r\n          } else {\r\n            // Update existing user's account if needed\r\n            const existingAccount = existingUser.accounts.find((acc: IGmailAccount) => acc.email === user.email)\r\n            if (!existingAccount) {\r\n              existingUser.accounts.push({\r\n                email: user.email!,\r\n                accessToken: account.access_token!,\r\n                refreshToken: account.refresh_token!,\r\n                profilePicture: user.image,\r\n                isActive: true,\r\n                addedAt: new Date()\r\n              })\r\n              await existingUser.save()\r\n            } else {\r\n              // Update tokens\r\n              existingAccount.accessToken = account.access_token!\r\n              existingAccount.refreshToken = account.refresh_token!\r\n              await existingUser.save()\r\n            }\r\n          }\r\n          \r\n          return true\r\n        } catch (error) {\r\n          console.error('Error in signIn callback:', error)\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    async session({ session }) {\r\n      if (session.user?.email) {\r\n        try {\r\n          await connectDB()\r\n          const user = await User.findOne({ email: session.user.email })\r\n          if (user) {\r\n            session.user.id = user._id.toString()\r\n            session.user.subscription = user.subscription\r\n            session.user.accounts = user.accounts\r\n          }\r\n        } catch (error) {\r\n          console.error('Error in session callback:', error)\r\n        }\r\n      }\r\n      return session\r\n    },\r\n    async jwt({ token, account }) {\r\n      if (account) {\r\n        token.accessToken = account.access_token\r\n        token.refreshToken = account.refresh_token\r\n      }\r\n      return token\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/auth/signin',\r\n    error: '/auth/error',\r\n  },\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n}\r\n\r\nexport default authOptions "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":["file:///H:/Fusion%20Mail%20-%20Chrome%20Extension/zeromail/fusion-mail-website/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\r\nimport { authOptions } from '@/lib/auth'\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST } "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,oHAAA,CAAA,cAAW","debugId":null}}]
}